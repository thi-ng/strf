#+SETUPFILE: ./src/setup.org
#+TITLE: thi.ng/strf
#+AUTHOR: Karsten Schmidt
#+EMAIL: k@thi.ng

* Contents                                                         :toc_3_gh:
 - [[#about-the-project][About the project]]
     - [[#description][Description]]
     - [[#current-leiningen-coordinates][Current Leiningen coordinates]]
     - [[#example-usage][Example usage]]
 - [[#namespaces][Namespaces]]
 - [[#tests][Tests]]
 - [[#project-definition][Project definition]]
     - [[#injected-properties][Injected properties]]
     - [[#dependencies][Dependencies]]
         - [[#runtime][Runtime]]
         - [[#development][Development]]
     - [[#leiningen-coordinates][Leiningen coordinates]]
     - [[#building-this-project][Building this project]]
         - [[#testing][Testing]]
         - [[#working-with-the-repl][Working with the REPL]]
     - [[#leiningen-project-file][Leiningen project file]]
     - [[#clojurescript-html-harness][ClojureScript HTML harness]]
     - [[#accessing-library-version-during-runtime][Accessing library version during runtime]]
         - [[#version-namespace][Version namespace]]
     - [[#release-history][Release history]]
     - [[#contributors][Contributors]]
     - [[#license][License]]

* About the project
** Description

A small library providing composable, extensible string & date
formatters and number parser helper functions for
Clojure/Clojurescript. This library is the result of a thi.ng
projectwide restructuring / dissolving of the [[http://thi.ng/common][thi.ng/common]] library.

*Note:* This library relies on the conditional reader syntax of recent
Clojure & Clojurescript versions and therefore is *not compatible with
Clojure versions < 1.7.0*...

** Current Leiningen coordinates

#+BEGIN_SRC clojure :noweb yes :noweb-ref lein-coords
  [thi.ng/strf "0.2.4"]
#+END_SRC

** Example usage

#+BEGIN_SRC clojure
  (require '[thi.ng.strf.core :as f])

  (f/parse-long "decafbad" 16)
  ;; 3737844653

  (f/parse-int "w00t" 10 :fail)
  ;; :fail

  (f/parse-float "3.1415926")
  ;; 3.1415926

  (f/parse-float "w00t" :fail)
  ;; :fail

  (f/format ["Rounded to 1/100th: " (f/float 2)] 3.1415926)
  ;; "Rounded to 1/100th: 3.14"

  (f/format ["#" (f/hex 2) (f/hex 2) (f/hex 2)] 8 64 192)
  ;; "#0840c0"

  (f/format-date (f/now))
  ;; "2015-05-23 01:43:21"

  (f/format-date :mm-dd-yyyy (f/now))
  ;; "05/23/2015"

  (keys f/date-formatters)
  ;; (:yyyy-mm-dd :yyyy-mm-dd-hh-mm-ss :dd-mm-yyyy :mm-dd-yyyy :dd-mm-yy :hh-mm-ss)
#+END_SRC

* Namespaces

- [[./src/core.org][thi.ng.strf.core]]

* Tests

- TBD

* Project definition
** Injected properties                                             :noexport:

#+BEGIN_SRC clojure :noweb-ref version
0.2.4
#+END_SRC
#+BEGIN_SRC clojure :exports none :noweb-ref project-url
http://thi.ng/strf
#+END_SRC
#+BEGIN_SRC clojure :exports none :noweb yes :noweb-ref cljs-artefact-path
target/strf-<<version>>.js
#+END_SRC

** Dependencies
*** Runtime
**** [[https://github.com/clojure/clojure][Clojure]]
#+BEGIN_SRC clojure :noweb-ref dep-clj
[org.clojure/clojure "1.11.1"]
#+END_SRC
**** [[https://github.com/clojure/clojurescript][ClojureScript]]
#+BEGIN_SRC clojure :noweb-ref dep-cljs
[org.clojure/clojurescript "1.11.121"]
#+END_SRC
*** Development
**** [[https://github.com/hugoduncan/criterium][Criterium]]
#+BEGIN_SRC clojure :noweb-ref dep-criterium
[criterium "0.4.6"]
#+END_SRC
**** [[https://github.com/cemerick/clojurescript.test][clojurescript.test]]
#+BEGIN_SRC clojure :noweb-ref dep-cljs-test
[com.cemerick/clojurescript.test "0.3.3"]
#+END_SRC
**** [[https://github.com/emezeske/lein-cljsbuild][Cljsbuild]]
#+BEGIN_SRC clojure :noweb-ref dep-cljsbuild
[lein-cljsbuild "1.1.8"]
#+END_SRC

** Building this project

This project is written in a literate programming format and requires
[[https://www.gnu.org/software/emacs/][Emacs]] & [[http://orgmode.org][Org-mode]] to generate usable source code. Assuming both tools
are installed, the easiest way to generate a working project is via
command line (make sure =emacs= is on your path or else edit its path
in =tangle.sh=):

#+BEGIN_SRC bash
  git clone https://github.com/thi.ng/strf.git
  cd strf
  ./tangle.sh src/*.org test/*.org
#+END_SRC

Tangling is the process of extracting & combining source blocks from
=.org= files into an actual working project/source tree. Once tangling
is complete, you can =cd= into the generated project directory
(=babel=) and then use =lein= as usual.

*** Testing

The =project.clj= file defines an alias to trigger a complete build &
tests for both CLJ & CLJS versions.

#+BEGIN_SRC bash
  cd babel
  lein cleantest
#+END_SRC

To build the Clojurescript version simply run =lein cljsbuild test=
from the same directory. A small HTML harness for the resulting JS
file is also located in that folder (=babel/index.html=), allowing for
further experimentation in the browser.

*** Working with the REPL

Editing code blocks or files in Org-mode, then re-loading & testing
changes is quite trivial. Simply launch a REPL (via =lein= or Emacs)
as usual. Everytime you've made changes to an =.org= file, re-tangle
it from Emacs (=C-c C-v t=) or =tangle.sh=, then reload the namespace
in the REPL via =(require 'thi.ng.strf... :reload)= or similar.

** Leiningen project file                                          :noexport:

#+BEGIN_SRC clojure :tangle ./babel/project.clj :noweb yes :mkdirp yes :padline no
  (defproject thi.ng/strf "<<version>>"
    :description  "Extensible CLJ/CLJS string formatting"
    :url          "<<project-url>>"
    :license      {:name "Apache Software License 2.0"
                   :url "http://www.apache.org/licenses/LICENSE-2.0"
                   :distribution :repo}
    :scm          {:name "git"
                   :url "git@github.com:thi-ng/strf.git"}

    :min-lein-vesion "2.4.0"
    
    :dependencies [<<dep-clj>>
                   <<dep-cljs>>]

    :source-paths ["src"]
    :test-paths   ["test"]

    :profiles     {:dev {:dependencies [<<dep-criterium>>]
                         :plugins [<<dep-cljsbuild>>
                                   <<dep-cljs-test>>]
                         :global-vars {*warn-on-reflection* true}
                         :jvm-opts ^:replace []
                         :aliases {"cleantest" ["do" "clean," "test," "cljsbuild" "test"]}
                  }}

    :cljsbuild    {:builds [{:id "simple"
                             :source-paths ["src" "test"]
                             :compiler {:output-to "<<cljs-artefact-path>>"
                                        :optimizations :whitespace
                                        :pretty-print true}}]
                   :test-commands {"unit-tests" ["phantomjs" :runner "<<cljs-artefact-path>>"]}}

    :pom-addition [:developers [:developer
                                [:name "Karsten Schmidt"]
                                [:url "https://thi.ng"]
                                [:timezone "0"]]])
#+END_SRC

** ClojureScript HTML harness                                      :noexport:

#+BEGIN_SRC html :tangle ./babel/index.html :noweb yes :mkdirp yes :padline no
  <!DOCTYPE html>
  <html lang="en">
    <head>
      <title><<lein-coords>> test</title>
    </head>
    <body>
      <script type="text/javascript" src="<<cljs-artefact-path>>"></script>
    </body>
  </html>
#+END_SRC

** Accessing library version during runtime

The autogenerated namespace =thi.ng.strf.version= contains a single
symbol =version= holding the version string defined above:

#+BEGIN_SRC clojure :noweb yes
  (use '[thi.ng.strf.version])
  
  (prn version)
  ; "<<version>>"
#+END_SRC

*** Version namespace                                              :noexport:

#+BEGIN_SRC clojure :tangle ./babel/src/thi/ng/strf/version.cljc :noweb yes :mkdirp yes :padline no :exports none
  (ns thi.ng.strf.version)

  (def version "<<version>>")
#+END_SRC

** Release history

| *Version* | *Released* | *Lein coordinates*      | *Description*                                 | *Tagged Github URL* |
|-----------+------------+-------------------------+-----------------------------------------------+---------------------|
|     0.2.4 | 2022-10-23 | =[thi.ng/strf "0.2.4"]= | remove shadow warnings (#2)                   | [[https://github.com/thi-ng/strf/tree/0.2.4][0.2.4]]               |
|     0.2.3 | 2022-04-23 | =[thi.ng/strf "0.2.3"]= | update deps                                   | [[https://github.com/thi-ng/strf/tree/0.2.3][0.2.3]]               |
|     0.2.2 | 2016-02-28 | =[thi.ng/strf "0.2.2"]= | bugfix float formatting for certain locales   | [[https://github.com/thi-ng/strf/tree/0.2.2][0.2.2]]               |
|     0.2.1 | 2015-08-30 | =[thi.ng/strf "0.2.1"]= | bugfix rand-bits-hex                          | [[https://github.com/thi-ng/strf/tree/0.2.1][0.2.1]]               |
|     0.2.0 | 2015-08-30 | =[thi.ng/strf "0.2.0"]= | add date formats, UUIDv4 gen & hex formatters | [[https://github.com/thi-ng/strf/tree/0.2.0][0.2.0]]               |
|     0.1.0 | 2015-05-25 | =[thi.ng/strf "0.1.0"]= | initial test release                          | [[https://github.com/thi-ng/strf/tree/0.1.0][0.1.0]]               |

** Contributors

| *Name*          | *Role*                          | *Website*                  |
|-----------------+---------------------------------+----------------------------|
| [[@postspectacular][Karsten Schmidt]] | initiator & principal developer | https://thi.ng |
| [[@dgtized][Charles Comstock]] | bug fixes | https://dgtized.github.io/ |

I've got a fairly detailed roadmap and task list to implement over the
coming months, but am always happy to receive feedback & suggestions
and have issues filed. Once the core engine is more refined I'll be
gladly welcoming other contributions. Thanks for understanding!

** License

This project is open source and licensed under the [[http://www.apache.org/licenses/LICENSE-2.0][Apache Software License 2.0]].
